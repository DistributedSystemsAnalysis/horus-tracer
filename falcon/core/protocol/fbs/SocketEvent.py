# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers

class SocketEvent(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsSocketEvent(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SocketEvent()
        x.Init(buf, n + offset)
        return x

    # SocketEvent
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SocketEvent
    def SourcePort(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # SocketEvent
    def DestinationPort(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # SocketEvent
    def SocketFamily(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SocketEvent
    def SocketType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SocketEvent
    def SocketFrom(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SocketEvent
    def SocketTo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SocketEvent
    def SocketId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SocketEvent
    def EventType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # SocketEvent
    def Event(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def SocketEventStart(builder): builder.StartObject(9)
def SocketEventAddSourcePort(builder, sourcePort): builder.PrependUint16Slot(0, sourcePort, 0)
def SocketEventAddDestinationPort(builder, destinationPort): builder.PrependUint16Slot(1, destinationPort, 0)
def SocketEventAddSocketFamily(builder, socketFamily): builder.PrependInt32Slot(2, socketFamily, 0)
def SocketEventAddSocketType(builder, socketType): builder.PrependInt32Slot(3, socketType, 0)
def SocketEventAddSocketFrom(builder, socketFrom): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(socketFrom), 0)
def SocketEventAddSocketTo(builder, socketTo): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(socketTo), 0)
def SocketEventAddSocketId(builder, socketId): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(socketId), 0)
def SocketEventAddEventType(builder, eventType): builder.PrependUint8Slot(7, eventType, 0)
def SocketEventAddEvent(builder, event): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(event), 0)
def SocketEventEnd(builder): return builder.EndObject()
